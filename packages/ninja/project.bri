import * as std from "std";
import { gitCheckout } from "git";
import { cmakeBuild } from "cmake";
import nushell from "nushell";

export const project = {
  name: "ninja",
  version: "1.12.1",
};

const source = gitCheckout(
  Brioche.gitRef({
    repository: "https://github.com/ninja-build/ninja",
    ref: `v${project.version}`,
  }),
);

export default function ninja(): std.Recipe<std.Directory> {
  return cmakeBuild({
    source,
    runnable: "bin/ninja",
    dependencies: [std.toolchain()],
    set: { BUILD_TESTING: "false" },
  });
}
export async function test() {
  const script = std.runBash`
    echo -n "$(ninja --version)" | tee "$BRIOCHE_OUTPUT"
  `.dependencies(ninja());
  const output = await script.toFile().read();

  std.assert(
    output.startsWith(project.version),
    `expected version ${project.version}, got ${JSON.stringify(output)}`,
  );

  return script;
}

export function autoUpdate() {
  const src = std.file(std.indoc`
    let version = http get https://api.github.com/repos/ninja-build/ninja/releases/latest
      | get tag_name
      | str replace --regex '^v' ''

    $env.project | from json | update version $version | to json
  `);

  return std.withRunnable(std.directory(), {
    command: "nu",
    args: [src],
    env: { project: JSON.stringify(project) },
    dependencies: [nushell()],
  });
}
